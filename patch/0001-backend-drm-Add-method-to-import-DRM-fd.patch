From e7d843e3a2af9ed04569f4ec94d3f558ab2aeede Mon Sep 17 00:00:00 2001
From: Damian Hobson-Garcia <dhobsong@igel.co.jp>
Date: Wed, 20 Jan 2021 16:25:39 +0900
Subject: [PATCH 1/2] backend-drm: Add method to import DRM fd

Allow the compositor to provide a file descriptor for a
DRM device.

This allows the compositor to bypass the launcher backends
and to get a DRM file descriptor from an external
resource manager, such as one that can create DRM leases,
and pass it to the DRM backend for use.

Having the DRM device management in the compositor allows for
integrating a platform specific resource manager without having
to add extra dependencies to the generic libweston code.
---
 compositor/main.c               |  1 +
 include/libweston/backend-drm.h |  7 +++
 libweston/backend-drm/drm.c     | 76 ++++++++++++++++++++++++---------
 3 files changed, 65 insertions(+), 19 deletions(-)

diff --git a/compositor/main.c b/compositor/main.c
index 8eb8a470..7d5373f7 100644
--- a/compositor/main.c
+++ b/compositor/main.c
@@ -2921,6 +2921,7 @@ load_drm_backend(struct weston_compositor *c,
 	config.base.struct_version = WESTON_DRM_BACKEND_CONFIG_VERSION;
 	config.base.struct_size = sizeof(struct weston_drm_backend_config);
 	config.configure_device = configure_input_device;
+	config.device_fd = -1;
 
 	wet->heads_changed_listener.notify = drm_heads_changed;
 	weston_compositor_add_heads_changed_listener(c,
diff --git a/include/libweston/backend-drm.h b/include/libweston/backend-drm.h
--- a/include/libweston/backend-drm.h
+++ b/include/libweston/backend-drm.h
@@ -241,3 +241,10 @@ struct weston_drm_backend_config {
+
+        /** DRM device file descriptor to use
+          *
+          * An openeded DRM device file descriptor.  If <0, open a DRM
+          * device in the backend using `specific_device` or heuristics.
+          */
+	int device_fd;
 };
 
 #ifdef  __cplusplus
diff --git a/libweston/backend-drm/drm.c b/libweston/backend-drm/drm.c
index e3169b6e..300c9ff6 100644
--- a/libweston/backend-drm/drm.c
+++ b/libweston/backend-drm/drm.c
@@ -40,6 +40,7 @@
 #include <linux/vt.h>
 #include <assert.h>
 #include <sys/mman.h>
+#include <sys/stat.h>
 #include <time.h>
 
 #include <xf86drm.h>
@@ -2769,31 +2770,23 @@ drm_device_changed(struct weston_compositor *compositor,
 	wl_signal_emit(&compositor->session_signal, compositor);
 }
 
-/**
- * Determines whether or not a device is capable of modesetting. If successful,
- * sets b->drm.fd and b->drm.filename to the opened device.
- */
 static bool
-drm_device_is_kms(struct drm_backend *b, struct drm_device *device,
-		  struct udev_device *udev_device)
+drm_backend_update_kms_device(struct drm_backend *b, struct drm_device *device,
+			struct udev_device *udev_device, const char *name, int drm_fd )
 {
 	struct weston_compositor *compositor = b->compositor;
-	const char *filename = udev_device_get_devnode(udev_device);
 	const char *sysnum = udev_device_get_sysnum(udev_device);
 	dev_t devnum = udev_device_get_devnum(udev_device);
 	drmModeRes *res;
-	int id = -1, fd;
+	int id = -1;
 
-	if (!filename)
+	if (!name)
 		return false;
 
-	fd = weston_launcher_open(compositor->launcher, filename, O_RDWR);
-	if (fd < 0)
-		return false;
 
-	res = drmModeGetResources(fd);
+	res = drmModeGetResources(drm_fd);
 	if (!res)
-		goto out_fd;
+		return false;
 
 	if (res->count_crtcs <= 0 || res->count_connectors <= 0 ||
 	    res->count_encoders <= 0)
@@ -2801,7 +2796,7 @@ drm_device_is_kms(struct drm_backend *b, struct udev_device *device)
 	if (sysnum)
 		id = atoi(sysnum);
 	if (!sysnum || id < 0) {
-		weston_log("couldn't get sysnum for device %s\n", filename);
+		weston_log("couldn't get sysnum for device %s\n", name);
 		goto out_res;
 	}
 
@@ -2811,9 +2821,9 @@ drm_device_is_kms(struct drm_backend *b, struct udev_device *device)
 		weston_launcher_close(compositor->launcher, device->drm.fd);
 	free(device->drm.filename);
 
-	device->drm.fd = fd;
+	device->drm.fd = drm_fd;
 	device->drm.id = id;
-	device->drm.filename = strdup(filename);
+	device->drm.filename = strdup(name);
 	device->drm.devnum = devnum;
 
 	drmModeFreeResources(res);
@@ -2822,11 +2817,33 @@ drm_device_is_kms(struct drm_backend *b, struct udev_device *device)
 
 out_res:
 	drmModeFreeResources(res);
-out_fd:
-	weston_launcher_close(b->compositor->launcher, fd);
 	return false;
 }
 
+/**
+ * Determines whether or not a device is capable of modesetting. If successful,
+ * sets b->drm.fd and b->drm.filename to the opened device.
+ */
+static bool
+drm_device_is_kms(struct drm_backend *b, struct drm_device *device, struct udev_device *udev_device)
+{
+	int fd;
+	const char *filename = udev_device_get_devnode(udev_device);
+	if (!filename)
+		return false;
+
+	fd = weston_launcher_open(b->compositor->launcher, filename, O_RDWR);
+	if (fd < 0)
+		return false;
+
+	if (!drm_backend_update_kms_device(b, device, udev_device, filename, fd)) {
+		weston_launcher_close(b->compositor->launcher, fd);
+		return false;
+	}
+
+	return true;
+}
+
 /*
  * Find primary GPU
  * Some systems may have multiple DRM devices attached to a single seat. This
@@ -2915,6 +2938,25 @@ find_primary_gpu(struct drm_backend *b, const char *seat)
 	return drm_device;
 }
 
+static struct udev_device *
+import_drm_device_fd(struct drm_backend *b, int fd)
+{
+	struct udev_device *udev_device;
+	struct stat s;
+
+	if (fstat(fd, &s) < 0 || !S_ISCHR(s.st_mode))
+		return NULL;
+
+	udev_device = udev_device_new_from_devnum(b->udev, 'c', s.st_rdev);
+	if (!udev_device)
+		return NULL;
+
+	if (!drm_backend_update_kms_device(b, b->drm, udev_device, "imported DRM device fd", fd))
+		return NULL;
+
+	return udev_device;
+}
+
 static struct udev_device *
 open_specific_drm_device(struct drm_backend *b, const char *name)
 {
@@ -3152,7 +3194,9 @@ drm_backend_create(struct weston_compositor *compositor,
 	b->session_listener.notify = session_notify;
 	wl_signal_add(&compositor->session_signal, &b->session_listener);
 
-	if (config->specific_device)
+	if (config->device_fd >= 0)
+		drm_device = import_drm_device_fd(b, config->device_fd);
+	else if (config->specific_device)
 		drm_device = open_specific_drm_device(b, device,
						      config->specific_device);
 	else
 		drm_device = find_primary_gpu(b, seat_id);
@@ -3343,6 +3380,7 @@ static void
 config_init_to_defaults(struct weston_drm_backend_config *config)
 {
 	config->use_pixman_shadow = true;
+	config->device_fd = -1;
 }
 
 WL_EXPORT int
-- 
2.25.1
